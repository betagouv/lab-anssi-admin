#!/usr/bin/env bash
set -euo pipefail

tmp_dir="$(mktemp -d)"
GPG_HOME_DIR="${GPG_HOME_DIR:-$(mktemp -d)}"

import_pgp_keys() {
  gpg --homedir "${GPG_HOME_DIR}" --import <(echo "$PGP_KEYS") 2>/dev/null
}

list_keys() {
  gpg --homedir "${GPG_HOME_DIR}" --list-keys --with-colons | awk -F: '/^pub:/ {print $5}'
}

gpg_encrypt() {
  local recipients=""
  for key in $(list_keys)
  do
    recipients="$recipients --recipient $key"
  done

  # shellcheck disable=SC2086
  gpg --homedir "${GPG_HOME_DIR}" --trust-model always --encrypt $recipients
}

check_dump_is_healthy() {
  local dump="$1"
  pg_restore --list "$dump" >/dev/null
}

declare -F download > /dev/null || download() {
  local addon="$1"
  local backup

  backup="$(clever database backups "$addon" | tail -n1 | cut -d' ' -f1)"
  clever database backups download "$addon" "$backup"
}

declare -F s3_push > /dev/null || s3_push() {
  local destination="$1"
  s3cmd --quiet --host-bucket="${S3_HOST_BUCKET}" put - "${destination}"
}

backup_and_push() {
  local db_name="$1"
  local addon_id="$2"

  echo -n "Backup of database $db_name ($addon_id)..." >&2
  download "$addon_id" > "$tmp_dir/$db_name"
  check_dump_is_healthy "$tmp_dir/$db_name"
  < "$tmp_dir/$db_name" gpg_encrypt | s3_push "s3://${BACKUP_BUCKET_NAME}/backups/${db_name}.pgp"
  echo "Done" >&2
}

usage() {
  echo "$0" >&2
  echo Error: "$@" >&2
  echo >&2
  echo "Launch a backup of our databases" >&2
  echo "The following environment variables must be defined:" >&2
  echo >&2
  echo "PGP_KEYS: The public keys for which we must encrypt the backup" >&2
  echo >&2
  echo "ADDON_ID_<db_name>=<addon_id>: the name of the db to backup and its addon id" >&2
  echo "  An ADDON_ID_<db_name> must be defined for each addon to backup" >&2
  echo "S3_BUCKETS_TO_BACKUP: list of name of buckets we want to backup" >&2
  echo >&2
  echo "RCLONE_CONFIG_SOURCE_ACCESS_KEY_ID: authentication information for source S3 bucket to backup" >&2
  echo "RCLONE_CONFIG_SOURCE_SECRET_ACCESS_KEY: authentication information for source S3 bucket to backup" >&2
  echo "RCLONE_CONFIG_SOURCE_ENDPOINT: endpoint information for source S3 bucket to backup" >&2
  echo >&2
  echo "RCLONE_CONFIG_TARGET_ACCESS_KEY_ID: authentication information for target S3 bucket where to store the backup" >&2
  echo "RCLONE_CONFIG_TARGET_SECRET_ACCESS_KEY: authentication information for target S3 bucket where to store the backup" >&2
  echo "RCLONE_CONFIG_TARGET_ENDPOINT: endpoint information for target S3 bucket where to store the backup" >&2

  echo >&2
  echo "BACKUP_BUCKET_NAME: the name of the target bucket to where to store the backup" >&2
  echo "S3_HOST_BUCKET: configuration of target S3 system" >&2
  echo "  may look like this: '%(bucket)s.cellar-c2.services.clever-cloud.com'" >&2
  echo >&2
  echo "CLEVER_SECRET: authentication information to download add-on backup" >&2
  echo "CLEVER_TOKEN: authentication information to download add-on backup" >&2

  exit 1
}

[[ -z "${PGP_KEYS+x}"              ]] && usage "You must define PGP_KEYS"
[[ -z "${BACKUP_BUCKET_NAME+x}"    ]] && usage "You must define BACKUP_BUCKET_NAME"
[[ -z "${S3_HOST_BUCKET+x}"        ]] && usage "You must define S3_HOST_BUCKET"
[[ -z "${CLEVER_SECRET+x}"         ]] && usage "You must define CLEVER_SECRET"
[[ -z "${CLEVER_TOKEN+x}"          ]] && usage "You must define CLEVER_TOKEN"

[[ -z "${RCLONE_CONFIG_SOURCE_ACCESS_KEY_ID+x}"     ]] && usage "You must define RCLONE_CONFIG_SOURCE_ACCESS_KEY_ID"
[[ -z "${RCLONE_CONFIG_SOURCE_SECRET_ACCESS_KEY+x}" ]] && usafe "You must define RCLONE_CONFIG_SOURCE_ACCESS_KEY_ID"
[[ -z "${RCLONE_CONFIG_SOURCE_ENDPOINT+x}"          ]] && usafe "You must define RCLONE_CONFIG_SOURCE_ENDPOINT"
[[ -z "${RCLONE_CONFIG_TARGET_ACCESS_KEY_ID+x}"     ]] && usage "You must define RCLONE_CONFIG_TARGET_ACCESS_KEY_ID"
[[ -z "${RCLONE_CONFIG_TARGET_SECRET_ACCESS_KEY+x}" ]] && usafe "You must define RCLONE_CONFIG_TARGET_ACCESS_KEY_ID"
[[ -z "${RCLONE_CONFIG_TARGET_ENDPOINT+x}"          ]] && usafe "You must define RCLONE_CONFIG_TARGET_ENDPOINT"
[[ -z "${S3_BUCKETS_TO_BACKUP+x}"                   ]] && usafe "You must define S3_BUCKETS_TO_BACKUP"

export AWS_ACCESS_KEY_ID="$RCLONE_CONFIG_TARGET_ACCESS_KEY_ID"
export AWS_SECRET_ACCESS_KEY="$RCLONE_CONFIG_TARGET_SECRET_ACCESS_KEY"

if ! set | grep '^ADDON_ID_' >/dev/null
then
  usage 'missing ADDON_ID, nothing to backup'
fi

import_pgp_keys

for var in $(set | grep '^ADDON_ID_'); do
  # shellcheck disable=SC2001
  addon_name="$(echo "$var" | sed -e 's:^ADDON_ID_\(.*\)=.*:\1:')"
  addon_value="$(echo "$var" | cut -d'=' -f2)"
  backup_and_push "$addon_name" "$addon_value"
done

rm -rf "$tmp_dir"

for bucket in ${S3_BUCKETS_TO_BACKUP}
do
  echo "Backup of S3 bucket $bucket" >&2
  rclone sync "SOURCE:${bucket}" "TARGET:pilot-eagle-tennis/backups/S3/${bucket}" --progress
done

